### Special functions ##########################################################

## ## If package contains compiled code
## useDynLib(gnn, .registration = TRUE)


### Imports ####################################################################

importFrom("qrng",
           "sobol")

importFrom("keras",
           "layer_input", "layer_dense", "layer_batch_normalization",
           "layer_dropout", "k_shape", "%>%", "layer_concatenate",
           "layer_lambda", "k_random_normal", "keras_model", "multi_gpu_model",
           "compile", "k_mean", "k_square", "k_exp",
           "loss_mean_squared_error", "loss_binary_crossentropy",
           "save_model_weights_hdf5", "load_model_weights_hdf5",
           "fit", "serialize_model", "unserialize_model",
           "count_params")

importFrom("tensorflow",
           "tf")

importFrom("utils",
           "data", "packageName", "str")

importFrom("methods",
           "hasArg", "is")

importFrom("stats",
           "predict", "rnorm", "qnorm", "plogis", "qlogis", "prcomp")

importFrom("tools",
           "file_path_sans_ext")

importFrom("copula",
           "rCopula", "cCopula", "indepCopula")


### Exports ####################################################################

## Constructors
export("GMMN") # constructor of object of S3 class c("gnn_GMMN", "gnn_GNN", "gnn_Model")

## Generics
export("rGNN")
export("ffGNN")
export("as.keras")

## Basic methods
S3method("print",    "gnn_GNN")
S3method("str",      "gnn_GNN")
S3method("summary",  "gnn_GNN")
S3method("dim",      "gnn_GNN")
S3method("rGNN",     "gnn_GNN")
S3method("ffGNN",    "gnn_GNN")
S3method("as.raw",   "gnn_GNN")
S3method("as.keras", "gnn_GNN")

export("train", "train_once")

## Functions
export("loss")
export("range_trafo", "logis_trafo", "PCA_trafo")
export("exists_rda", "read_rda", "save_rda", "modify_rda")
export("catch", "TensorFlow_available", # use via if(!TensorFlow_available()) q()
       "rm_ext", "human_time")
