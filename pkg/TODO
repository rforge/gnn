## Short-term
- fix 'svn st'
- allow "trained(x) <- FALSE"
- export and test:
  + rPrior() (use the pasted part below)
  + method is.trained()
  + method is.GNN()
  + saveGNN()
  + loadGNN()
  + fitGNN() (remove/adapt train(), trainonce .Rd)
- fitGNN
  + check verbose argument (and perhaps do your own version)
  + can we save the loss function values after every epoch?
- remove all demos and saved NNs and store them locally (with those version of the package)
- Use all new methods in all demos => update ./pro/time and ./pro/qmc_time

- implement and export constructor for class gnn_Model (slots model and type)
- implement and export methods rModel, fitModel, save/load
- incorporate S4 methods of 'copula' as S3 methods in gnn (objects, rCopula, fitCopula)

## Long-term
- plot method: what to use as 'low' and 'up' values to evaluate NN at (low,...,low,up,low,...,low)?
- Fix: Paper citations (2019 on arXiv or the real publication if published)
- KL(): If an analytical (differentiable) form exits for K-L divergence
        between copulas, we could propose an interesting extension.
        (Simpler) extensions to consider first: encoder maps to non-diagonal
        covariance matrix, Kendall matrix (which we then transform to covariance
        matrix for use in KL()).


  \item{copula}{object of \code{\link{S4}} class \code{"Copula"} for
    which the method \code{\link{rCopula}()} is available; see the \R
    package \pkg{copula}.}
  \item{qmargins}{marginal quantile function or a \code{\link{list}}
    of length \code{dim(x)[1]} of such.}
  \item{method}{\code{\link{character}} string indicating the sampling
    method. If \code{"sobol"}, then randomization \code{"digital.shift"}
    is used with seed 271; see the \R package \pkg{qrng}.}
  \item{\dots}{additional arguments passed to \code{method}.}

library(gnn)
x <- GMMN(c(2, 30, 2))
y <- list(x, x),